#!/usr/bin/env bash

param=$#
serv=$1
variable=$2
port=${variable:-8686}


arr[1]='up'
arr[2]='dn'
arr[3]='ss'
arr[4]='ex'
arr[5]='imgs'
arr[6]='rmi'
arr[7]='pull'

function usage {
	if [ "$param" -gt 2 -o "${param}" -lt 1 ]
	then
		echo "Usage:"
		echo "	jrocker [up|dn|ss|ex|imgs|rmi] [port|image-id]"
		echo "Details:"
		echo "	up -> startup a container for jrocker, default port 8686."
		echo "	dn -> shutdown a container or all container of jrocker."
		echo "	ex -> exec jrocker container."
		echo "	ss -> status of jrocker container."
		echo "	imgs -> list images of chunjiesamliu/jrocker"
		echo "	rmi -> remove image of chunjiesamliu/jrocker"
		echo "	pull -> pull latest image of chunjiesamliu/jrocker"
		echo "For example:"
		echo "	jrocker up 9191"
		exit 1
	fi

	if [[ ! "${arr[@]}" =~ "$serv" ]]
	then
		echo "Error:"
		echo "	Input must be one of 'up', 'dn', 'ss', 'ex', 'imgs' and 'rmi' to start jrocker"
		echo "Example:"
		echo "	jrocker ss"
		exit 1
	fi
}

function cpf {
	d=$1
	for i in `find ${HOME} -mindepth 1 -prune -name '.*'`;
	do
		name=`basename ${i}`
		[[ ${name} =~ '.rstudio' ]] && continue
		[[ ${name} =~ '.vscode' ]] && continue
		cmd="cp -rf ${i} ${d}/${name}"
		eval ${cmd}
	done
}

function lnf {
	d=$1
	for i in `find ${HOME} -mindepth 1 -prune -type f -name '.*'`;
	do
		name=`basename ${i}`
		[[ ${name} =~ '.rstudio' ]] && continue
		[[ ${name} =~ '.vscode' ]] && continue
		cmd="ln ${i} ${d}/${name}"
		eval ${cmd}
	done
}

function up {

	cs=(`docker ps|grep -o ${USER}-rstudio.*$`)
	[[ ${cs[@]} =~ "${USER}-rstudio-${port}" ]] && echo "Error: ${USER}-rstudio-${port} exists." && exit 1

	[[ ${port} -lt 8686 ]] && echo "Error: New port should be larger than 8686." && exit 1

	jd=${HOME}/.${USER}-rstudio/${USER}-rstudio-${port}

	[[ ! -d ${jd} ]] \
		&& mkdir -p ${jd} \
		&& lnf ${jd} \
		&& ln -s /workspace/${USER} ${jd}/workspace \
		&& ln -s /project/${USER} ${jd}/project \
		&& ln -s /data/${USER} ${jd}/data


		docker run -d -p ${port}:8787 \
		-m 1000g \
		-v ${jd}:${HOME}/ \
		-v /workspace/${USER}/:${HOME}/workspace/ \
		-v /project/${USER}/:${HOME}/project/ \
		-v /data/${USER}/:${HOME}/data/ \
		-v ${HOME}/R/:${HOME}/R/ \
		-v ${HOME}/scripts/:${HOME}/scripts/ \
		-v ${HOME}/tools/:${HOME}/tools/ \
		-v ${HOME}/github/:${HOME}/github/ \
		-v ${HOME}/tmp/:${HOME}/tmp/ \
		-e USER=${USER} -e PASSWORD=ðŸ™ƒ \
		-e USERID=$UID -e GROUPID=$GID -e ROOT=TRUE \
		--name ${USER}-rstudio-${port} chunjiesamliu/jrocker:latest

	echo "Start ${USER}-rstudio successfully with port ${port}."
}

function dn {
	cs=(`docker ps|grep -o ${USER}-rstudio.*$`)
	if [ ${param} -eq 2 ]
	then
		c="${USER}-rstudio-${port}"
		if [[ ${cs[@]} =~ ${port} ]]
		then
			docker container stop ${c}
			echo "Container ${c} is stopped"
			docker container rm ${c}
			echo "Container ${c} is removed"
		else
			echo "Error: Container ${c} not in the docker ps"
		fi
	else
		echo "Notice: You are going to stop all ${USER}-rstudio container ${cs[@]}."
		echo "Input (yes/no):"
		read choice
		case ${choice} in
			yes)
				echo "All jrocker container stopped."
				for c in ${cs[@]};
				do
					docker container stop ${c}
					echo "Container ${c} is stopped"
					docker container rm ${c}
					echo "Container ${c} is removed"
				done
				;;
			no)
				echo "No ${USER}-rstudio container stopped."
				;;
			*)
				echo "No ${USER}-rstudio container stopped."
				;;
		esac
	fi
}

function ss {
	info=`docker ps|grep ${USER}-rstudio`
	[[ -z ${info} ]] && echo "Notice: no ${USER}-rstudio container." || docker ps|grep ${USER}-rstudio
}

function ex {
	cs=(`docker ps|grep -o ${USER}-rstudio.*$`)
	c="${USER}-rstudio-${port}"
	[[ ${param} -ne 2 ]] && echo "Error: Input port for container." && ss && exit 1

	if [[ ${param} -eq 2 && ${cs[@]} =~ ${port} ]]
	then
		docker exec -it -u $UID:$GID -w ~ ${c} bash
	else
		echo "Notice: Input valid jrocker port."
		docker ps|grep ${USER}-rstudio
	fi
}

function imgs {
	docker image ls chunjiesamliu/jrocker
}

function rmi {
	if [ ${param} -eq 2 ]
	then
		docker image rm ${variable}
	else
		echo "Notice: Input valid jrocker image."
		exit 1
	fi

}

function pull {
	docker pull chunjiesamliu/jrocker:latest
}

usage
[[ ${serv} = 'up' ]] && up || usage
[[ ${serv} = 'dn' ]] && dn || usage
[[ ${serv} = 'ss' ]] && ss || usage
[[ ${serv} = 'ex' ]] && ex || usage
[[ ${serv} = 'rmi' ]] && rmi || usage
[[ ${serv} = 'imgs' ]] && imgs || usage
[[ ${serv} = 'pull' ]] && pull || usage
